=begin
RUBY
  
  # - Single line comment
  
  Multi-line comment  
    =begin

    =end
  Global Variable
    $variable_name    = can be used globally
  
  Instance Variable
    @variable_name    = 
    @@variable_name   = need to initialize before using it

  Local variable
    variable_name     = can be used inside a function or locally

  NOTE: Variable name begins in uppercase character == Constant variable
  
STANDARD INPUT  / OUTPUT

  print | puts | putc = Display (Output)
                      = Example:
                          
                          a = 5
                          b = 5
                          
                          print "5 + 5 = #{a + b}"  #Output: 5 + 5 = 10
                          
                          print "Hello, World!"     #Output: Hello, World!
                          
                      
  gets                = User Input
                      = Example:
                          uinput = gets
FILE INPUT / OUTPUT         

  obj = File.new("Filename","mode");
  
    MODE
    
      r     Read-Only (Default Mode)
      r+    Read-Write, start at the beginning of a file
      w     Write-only, clear content of a file or creates a new file for writing.
      w+    Read-Write, clear content of a file or creates a new file for reading and writing.
      a     Write-Only, Append to the end of file, if file not exist it will create a new file for writing
      a+    Read-write, Append to the end of file, if file not exist it will create a new file for reading and writing
      b     Binary File mode



=end



      BEGIN {
        # Statement inside the BEGIN { } will execute first before other statement(s)
      }

      END {
        # Statement inside the END { } will execute after the program or all statement(s) executed
      }

Function

      def functionName()

      end
      
      functionName;
    
      def functionName(parameters)

      end

      functionName(arguments);

Classes

      class ClassName
          def initialize(parameters)


          end
      end
      
      objectName = ClassName.new(arguments);

      class ClassName
          def functionName()

          end
      end

      objectName = ClassName.new;

      class ClassName
      
          @@variable_name = value; #needs to initialize before using it
      
          def initialize(parameters)
            # Instance variable here
          end
      
          def functionName()
          
          end
          
          def functionName(parameters)
          
          end
      end




FILE Input / Output
    Example:

    fin = File.new("file.in","r");

        # To access every character in a file
        fin.for_each { |ch| putc "=>#{ch}\n"}

        # To access every line in a file
        fin.each_line{ |word| print "=>#{word.dump}" }

        
Pseudo Variables



    self, true, false, nil

    __FILE__      Current source filename

    __LINE__      Current Line number of (__LINE__


INTEGERS

    1234
    1_234
    0b101       Binary            Begins with 0b and the value only contains 1's and 0's 
    077         Octal             Begins with 0
    0xfff       Hexadecimal       Begins with 0x


   Example: Conversion of Binary to Decimal, Hexadecimal and Octal
          111 Binary  =  7   Decimal
                      =  07  Octal
                      = 0x7  Hexadecimal

Table (Conversion 0 to 20 in Decimal, Hexadecimal and Octal)

          Decimal     Hexadecimal       Octal
            0           0                 0
            1           1                 1
            2           2                 2
            3           3                 3
            4           4                 4
            5           5                 5
            6           6                 6
            7           7                 7
            8           8                 10
            9           9                 11
            10          A                 12
            11          B                 13
            12          C                 14
            13          D                 15
            14          E                 16
            15          F                 17
            16          10                20
            17          11                21          
            18          12                22
            19          13                23
            20          14                24
  
  


FLOATING NUMBERS 

    3.1614            3.1416          #Floating point value
    3.1416e-1         0.31416         #Scientific Notation  
    1.2e+3            1200            #Scientific Notation


STRING LITERALS

  \       Used as escape character
    
    
    \\    # \
    \n    # newline
    \t    # tab
    \r    # carriage Return
    \f    # Form Feed
    \b    # Backspace
    \a    # Bell / Beep
    \e    # Escape
    \s    # Space
    \'    # '
    \nnn  # Octal Expression inside " ", where n is from 0-7
    
    
print "Hello, \
      World!"
      
      # Hello, World!
      
      
      
print "#{ruby_expression}" #put inside #{ }, any ruby expression


 
 
